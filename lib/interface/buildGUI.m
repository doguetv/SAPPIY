%% Comments
%Function that build GUI

%Associated GUI: SAPPIY
%Author: V. Doguet (21/2/2019)
%Updates:
%% Function
function buildGUI(handles)
%% Default Settings
searchResult = dir(fullfile(handles.resourcesPath, 'defaultSettings.mat'));
if isempty(searchResult)
    handles.settings.analyze.sequencingSource = 0;
    handles.settings.analyze.onset.value =      -.1;
    handles.settings.analyze.offset.value =     .5;
    handles.settings.analyze.onset.direction =  1;   %1 = <-| && 2 = |->
    handles.settings.analyze.offset.direction = 2;   %1 = <-| && 2 = |->
    handles.settings.analyze.onset.edge =       1;   %1 = < && 2 = >
    handles.settings.analyze.offset.edge =      2;   %1 = < && 2 = >
    handles.settings.analyze.view =             'single';
    handles.settings.analyze.signalTreat =      1;
    handles.settings.analyze.analyzeBtns =      cell(6, 1);
    handles.settings.live.Ymax =                10;
    handles.settings.live.Ymin =                -10;
    handles.settings.live.Xwindow =             5;  %in sec
    handles.settings.live.Xbefore =             -2;  %in sec
    handles.settings.live.AcqTime =             [];  %in sec
    handles.settings.live.TTLChecks =           zeros(4, 1);    %0 = disabled; 1 = enabled
    handles.settings.live.analogINChannel =     1;
    handles.settings.live.analogINValue =       [];
    handles.settings.live.manualOUTPort =       1;
    handles.settings.live.analogOUTChannel =    1;
    handles.settings.live.analogOUTPort =       1;
    handles.settings.live.analogOUTValue =      [];
    handles.settings.live.OUTFcn =              ones(2, 1);
    handles.settings.live.TTLEdges =            ones(2, 1);    %1 = rising; 2 = falling
    %Save settings
    saveDefaultSettings(handles)
else
    %Load default settings file
    handles = loadDefaultSettings(handles);
end
%Additional settings that cannot be saved
handles.localSettings.analyzeXLim = [];
handles.localSettings.analyzeYLim = [];
%% Create a figure
handles.hObject = figure('Name', getXML(handles.settings.xml.strings, 'Label', 'appName'), 'NumberTitle', 'off', ...
    'Menu', 'none', ...
    'Position', .6 * get(0, 'ScreenSize'), ...
    'Visible', 'off', ...
    'CloseRequestFcn', @closeFcn);

%Create two main panels
handles.panel.live = uipanel(handles.hObject, 'units', 'normalized', ...
    'position', [0, 0, 1, 1], ...
    'Visible', 'off');
handles.panel.analyze = uipanel(handles.hObject, 'units', 'normalized', ...
    'position', [0, 0, 1, 1], ...
    'Visible', 'off');
%Disable view for both panel at opening
handles.view = false(2, 1);

%MenuBar
handles.menu.main{1} = uimenu(handles.hObject);
handles.menu.main{2} = uimenu(handles.menu.main{1});
uimenu(handles.menu.main{1}, 'Callback', {@saveLiveData, handles});
uimenu(handles.menu.main{2}, 'Callback', {@createSession, handles});
uimenu(handles.menu.main{2}, 'Callback', {@loadSession, handles});
uimenu(handles.menu.main{2}, 'Callback', {@saveSession, handles});
handles.menu.main{3} = uimenu(handles.hObject);
uimenu(handles.menu.main{3}, 'Callback', {@importFcn, handles});
uimenu(handles.menu.main{3}, 'Callback', {@exportResultsFcn, handles});
handles.menu.main{4} = uimenu(handles.hObject);
uimenu(handles.menu.main{4}, 'Callback', {@setViewFcn, handles});
uimenu(handles.menu.main{4}, 'Callback', {@setViewFcn, handles});
handles.menu.main{5} = uimenu(handles.hObject);
uimenu(handles.menu.main{5}, 'Callback', {@setLanguage, handles});
uimenu(handles.menu.main{5}, 'Callback', @getHelp);

%Function that open user manual
    function getHelp(~,~)
        system(fullfile(handles.resourcesPath, 'user_guide.pdf'));
    end

%Function that change language
    function setLanguage(s, ~, handles)
        handles = guidata(handles.hObject);
        %Get current xml file used
        [path, currentFile] = fileparts(handles.settings.xml.strings);
        %Get list of xml files available in strings ressource
        %folder
        xmlFiles = dir(fullfile(path, '*.xml'));
        %Allocate list
        list = cell(length(xmlFiles), 1);
        for i = 1:length(xmlFiles)
            [~, list{i}] = fileparts(xmlFiles(i).name);
            if isequal(list{i}, currentFile)
                defaultAnsw = i;
            end
        end
        %Use popupdlg to select a language
        choice = popupdlg(list, defaultAnsw, s.Label);
        if isempty(choice)
            return
        end
        %Store selected language
        handles.settings.xml.strings = fullfile(path, xmlFiles(choice).name);
        %Call external function to reset languagei n all uicontrols
        handles = resetLanguage(handles);
        %Call update analyze display
        updateAnalyze(handles)
        
        guidata(handles.hObject, handles)
    end

%% Live Display Panel
handles.panel.liveDisplay = uipanel(handles.panel.live, 'units', 'normalized', ...
    'position', [.3, 0, .6, 1], ...
    'BackgroundColor', eval(getXML(handles.settings.xml.colors, 'Chart', 'backgroundLive')));
handles.axes.live = axes('Parent', handles.panel.liveDisplay, ...
    'units', 'normalized', ...
    'Position', [.1, .15, .85, .75], ...
    'Color', eval(getXML(handles.settings.xml.colors, 'Chart', 'backgroundLive')));
try
    handles.axes.live.Toolbar.Visible = 'on';
catch
    warning('Unable to display axes toolbars using the current Matlab version')
end
handles.edit.Ymin = uicontrol('Parent', handles.panel.liveDisplay, ...
    'Style', 'edit', ...
    'units', 'normalized', ...
    'Position', [.05, .15, .05, .05], ...
    'ForegroundColor', eval(getXML(handles.settings.xml.colors, 'Chart', 'foregroundLive')), ...
    'BackgroundColor', eval(getXML(handles.settings.xml.colors, 'Chart', 'backgroundLive')), ...
    'String', num2str(handles.settings.live.Ymin), ...
    'Tag', 'Ymin', ...
    'Callback', {@editLiveAxis, handles});
handles.edit.Ymax = uicontrol('Parent', handles.panel.liveDisplay, ...
    'Style', 'edit', ...
    'units', 'normalized', ...
    'Position', [.05, .85, .05, .05], ...
    'ForegroundColor', eval(getXML(handles.settings.xml.colors, 'Chart', 'foregroundLive')), ...
    'BackgroundColor', eval(getXML(handles.settings.xml.colors, 'Chart', 'backgroundLive')), ...
    'String', num2str(handles.settings.live.Ymax), ...
    'Tag', 'Ymax', ...
    'Callback', {@editLiveAxis, handles});
handles.edit.XLiveWindow = uicontrol('Parent', handles.panel.liveDisplay, ...
    'Style', 'edit', ...
    'units', 'normalized', ...
    'Position', [.1, .1, .05, .05], ...
    'ForegroundColor', eval(getXML(handles.settings.xml.colors, 'Chart', 'foregroundLive')), ...
    'BackgroundColor', eval(getXML(handles.settings.xml.colors, 'Chart', 'backgroundLive')), ...
    'String', num2str(handles.settings.live.Xwindow), ...
    'Tag', 'xwindow', ...
    'Callback', {@editLiveAxis, handles});
handles.edit.XLiveBefore = uicontrol('Parent', handles.panel.liveDisplay, ...
    'Style', 'edit', ...
    'units', 'normalized', ...
    'Position', [.9, .1, .05, .05], ...
    'ForegroundColor', eval(getXML(handles.settings.xml.colors, 'Chart', 'foregroundLive')), ...
    'BackgroundColor', eval(getXML(handles.settings.xml.colors, 'Chart', 'backgroundLive')), ...
    'String', num2str(handles.settings.live.Xbefore), ...
    'Tag', 'xbefore', ...
    'Callback', {@editLiveAxis, handles});
%Set XTickLabel Colors
handles.axes.live.XLabel.Color = eval(getXML(handles.settings.xml.colors, 'Chart', 'foregroundLive'));
handles.axes.live.YLabel.Color = eval(getXML(handles.settings.xml.colors, 'Chart', 'foregroundLive'));
handles.axes.live.XColor = eval(getXML(handles.settings.xml.colors, 'Chart', 'foregroundLive'));
handles.axes.live.YColor = eval(getXML(handles.settings.xml.colors, 'Chart', 'foregroundLive'));
%Create context menu to set colors
handles.contextMenu.liveAxis = uicontextmenu;
uimenu(handles.contextMenu.liveAxis, 'Callback', {@contextLiveOptions, handles});
set(handles.panel.liveDisplay, 'UiContextMenu', handles.contextMenu.liveAxis);
set(handles.axes.live, 'UiContextMenu', handles.contextMenu.liveAxis);
%% Live Controls Panel
%Header
handles.panel.liveHeader = uipanel(handles.panel.live, 'units', 'normalized', ...
    'position', [0, .9, .3, .1]);
%Radio group for view live objects
handles.radiogroup.liveView = uibuttongroup('Parent', handles.panel.liveHeader,...
    'units', 'normalized', ...
    'Position', [0, 0, 1, 1]);
handles.radio.liveView{1} = uicontrol('Parent', handles.radiogroup.liveView, ...
    'Style', 'radio', ...
    'units', 'normalized', ...
    'Position', [0, 0, .5, 1], ...
    'Callback', {@liveView, handles}, ...
    'Enable', 'off');
handles.radio.liveView{2} = uicontrol('Parent', handles.radiogroup.liveView, ...
    'Style', 'radio', ...
    'units', 'normalized', ...
    'Position', [.5, 0, .5, 1], ...
    'Callback', {@liveView, handles}, ...
    'Enable', 'off');
%AI Object
handles.panel.livePanels{1} = uipanel(handles.panel.live, 'units', 'normalized', ...
    'position', [0, 0, .3, .9], ...
    'Visible', 'off');
handles.table.AIChannels = uitable('Parent', handles.panel.livePanels{1}, ...
    'units', 'normalized', ...
    'position', [0, .2, 1, .8], ...
    'Interruptible', 'off', ...
    'CellEditCallback', {@editAITable, handles}, ...
    'CellSelectionCallback', {@selectAITable, handles});
handles.button.addChannelArithmetic = uicontrol('Parent', handles.panel.livePanels{1}, ...
    'Style', 'push', ...
    'units', 'normalized', ...
    'Position', [0, .15, .4, .05], ...
    'Callback', {@addChannel, handles});
handles.button.addGuideline = uicontrol('Parent', handles.panel.livePanels{1}, ...
    'Style', 'toggle', ...
    'units', 'normalized', ...
    'Position', [.6, .15, .4, .05], ...
    'Callback', {@addGuideline, handles});
handles.text.stopAfterLabel = uicontrol('Parent', handles.panel.livePanels{1}, ...
    'Style', 'text', ...
    'units', 'normalized', ...
    'HorizontalAlignment', 'right', ...
    'Position', [0, .05, .7, .05]);
handles.edit.stopAfter = uicontrol('Parent', handles.panel.livePanels{1}, ...
    'Style', 'edit', ...
    'units', 'normalized', ...
    'Position', [.8, .05, .2, .05], ...
    'String', num2str(handles.settings.live.AcqTime), ...
    'Callback', {@setAcqDuration, handles});
handles.check.startTriggerIn = uicontrol('Parent', handles.panel.livePanels{1}, ...
    'Style', 'check', ...
    'Value', 0, ...
    'units', 'normalized', ...
    'Position', [0, 0, .5, .05], ...
    'Callback', {@setTrigger, handles});
handles.check.startTriggerOut = uicontrol('Parent', handles.panel.livePanels{1}, ...
    'Style', 'check', ...
    'Value', 0, ...
    'units', 'normalized', ...
    'Position', [.5, 0, .5, .05], ...
    'Callback', {@setTrigger, handles});
%TTL Objects
handles.panel.livePanels{2} = uipanel(handles.panel.live, 'units', 'normalized', ...
    'position', [0, 0, .3, .9], ...
    'Visible', 'off');
handles.text.INLabel = uicontrol('Parent', handles.panel.livePanels{2}, ...
    'Style', 'text', ...
    'units', 'normalized', ...
    'Position', [.05, .95, .9, .05], ...
    'HorizontalAlignment', 'center');
handles.text.OUTLabel = uicontrol('Parent', handles.panel.livePanels{2}, ...
    'Style', 'text', ...
    'units', 'normalized', ...
    'Position', [.05, .45, .9, .05], ...
    'HorizontalAlignment', 'center');
handles.check.ttlIn{1} = uicontrol('Parent', handles.panel.livePanels{2}, ...
    'Style', 'check', ...
    'Value', 0, ...
    'units', 'normalized', ...
    'Position', [.05, .9, .9, .05], ...
    'Callback', {@setDigital, handles});
handles.check.ttlIn{2} = uicontrol('Parent', handles.panel.livePanels{2}, ...
    'Style', 'check', ...
    'Value', 0, ...
    'units', 'normalized', ...
    'Position', [.05, .85, .9, .05], ...
    'Callback', {@setDigital, handles});
handles.text.analogINChannelLabel = uicontrol('Parent', handles.panel.livePanels{2}, ...
    'Style', 'text', ...
    'units', 'normalized', ...
    'Position', [.15, .8, .45, .05], ...
    'HorizontalAlignment', 'right', ...
    'Enable', 'off');
handles.popup.analogINChannel = uicontrol('Parent', handles.panel.livePanels{2}, ...
    'Style', 'popup', ...
    'units', 'normalized', ...
    'Position', [.6, .8, .35, .05], ...
    'Enable', 'off', ...
    'String', {''}, ...
    'Callback', {@setDigital, handles});
handles.text.analogINValueLabel = uicontrol('Parent', handles.panel.livePanels{2}, ...
    'Style', 'text', ...
    'units', 'normalized', ...
    'Position', [.15, .75, .45, .05], ...
    'HorizontalAlignment', 'right', ...
    'Enable', 'off');
handles.edit.analogINValue = uicontrol('Parent', handles.panel.livePanels{2}, ...
    'Style', 'edit', ...
    'units', 'normalized', ...
    'Position', [.6, .75, .15, .05], ...
    'Enable', 'off', ...
    'Callback', {@setDigital, handles});
handles.button.analogINPeek = uicontrol('Parent', handles.panel.livePanels{2}, ...
    'Style', 'push', ...
    'units', 'normalized', ...
    'Position', [.75, .75, .2, .05], ...
    'Enable', 'off', ...
    'Callback', {@setDigital, handles});
handles.radio.analogINEdge{1} = uicontrol('Parent', handles.panel.livePanels{2}, ...
    'Style', 'radio', ...
    'units', 'normalized', ...
    'Position', [.15, .7, .35, .05], ...
    'Enable', 'off', ...
    'Callback', {@setDigital, handles});
handles.radio.analogINEdge{2} = uicontrol('Parent', handles.panel.livePanels{2}, ...
    'Style', 'radio', ...
    'units', 'normalized', ...
    'Position', [.6, .7, .35, .05], ...
    'Enable', 'off', ...
    'Callback', {@setDigital, handles});
handles.text.sequencingSource = uicontrol('Parent', handles.panel.livePanels{2}, ...
    'Style', 'text', ...
    'units', 'normalized', ...
    'Position', [.05, .6, .4, .05], ...
    'HorizontalAlignment', 'left', ...
    'Tag', 'allIN', ...
    'Enable', 'off');
handles.popup.sequencingSource = uicontrol('Parent', handles.panel.livePanels{2}, ...
    'Style', 'popup', ...
    'units', 'normalized', ...
    'Position', [.5, .6, .45, .05], ...
    'String', {''}, ...
    'Tag', 'allIN', ...
    'Enable', 'off', ...
    'Callback', {@setDigital, handles});
handles.text.sequencingOnset = uicontrol('Parent', handles.panel.livePanels{2}, ...
    'Style', 'text', ...
    'units', 'normalized', ...
    'Position', [.025, .55, .125, .05], ...
    'HorizontalAlignment', 'left', ...
    'Tag', 'allIN', ...
    'Enable', 'off');
handles.button.sequencingOnsetDirection = uicontrol('Parent', handles.panel.livePanels{2}, ...
    'Style', 'push', ...
    'units', 'normalized', ...
    'Position', [.15, .55, .1, .05], ...
    'Tag', 'allIN', ...
    'Enable', 'off', ...
    'Callback', {@setDigital, handles});
handles.button.sequencingOnsetEdge = uicontrol('Parent', handles.panel.livePanels{2}, ...
    'Style', 'push', ...
    'units', 'normalized', ...
    'Position', [.25, .55, .1, .05], ...
    'Tag', 'allIN', ...
    'Enable', 'off', ...
    'Callback', {@setDigital, handles});
handles.edit.sequencingOnsetValue = uicontrol('Parent', handles.panel.livePanels{2}, ...
    'Style', 'edit', ...
    'units', 'normalized', ...
    'Position', [.35, .55, .125, .05], ...
    'String', num2str(handles.settings.analyze.onset.value), ...
    'Tag', 'allIN', ...
    'Enable', 'off', ...
    'Callback', {@setDigital, handles});
handles.text.sequencingOffset = uicontrol('Parent', handles.panel.livePanels{2}, ...
    'Style', 'text', ...
    'units', 'normalized', ...
    'Position', [.5, .55, .125, .05], ...
    'HorizontalAlignment', 'left', ...
    'Tag', 'allIN', ...
    'Enable', 'off');
handles.button.sequencingOffsetDirection = uicontrol('Parent', handles.panel.livePanels{2}, ...
    'Style', 'push', ...
    'units', 'normalized', ...
    'Position', [.625, .55, .1, .05], ...
    'Tag', 'allIN', ...
    'Enable', 'off', ...
    'Callback', {@setDigital, handles});
handles.button.sequencingOffsetEdge = uicontrol('Parent', handles.panel.livePanels{2}, ...
    'Style', 'push', ...
    'units', 'normalized', ...
    'Position', [.725, .55, .1, .05], ...
    'Tag', 'allIN', ...
    'Enable', 'off', ...
    'Callback', {@setDigital, handles});
handles.edit.sequencingOffsetValue = uicontrol('Parent', handles.panel.livePanels{2}, ...
    'Style', 'edit', ...
    'units', 'normalized', ...
    'Position', [.825, .55, .125, .05], ...
    'String', num2str(handles.settings.analyze.offset.value), ...
    'Tag', 'allIN', ...
    'Enable', 'off', ...
    'Callback', {@setDigital, handles});
handles.check.ttlOut{1} = uicontrol('Parent', handles.panel.livePanels{2}, ...
    'Style', 'check', ...
    'Value', 0, ...
    'units', 'normalized', ...
    'Position', [.05, .4, .9, .05], ...
    'Callback', {@setDigital, handles});
handles.text.manualOUTPortLabel = uicontrol('Parent', handles.panel.livePanels{2}, ...
    'Style', 'text', ...
    'units', 'normalized', ...
    'Position', [.15, .35, .45, .05], ...
    'HorizontalAlignment', 'right', ...
    'Enable', 'off');
handles.popup.manualOUTPort = uicontrol('Parent', handles.panel.livePanels{2}, ...
    'Style', 'popup', ...
    'units', 'normalized', ...
    'Position', [.6, .35, .35, .05], ...
    'String', {''}, ...
    'Enable', 'off', ...
    'Callback', {@setDigital, handles});
handles.text.manualOUTFcnLabel = uicontrol('Parent', handles.panel.livePanels{2}, ...
    'Style', 'text', ...
    'units', 'normalized', ...
    'Position', [.15, .3, .45, .05], ...
    'HorizontalAlignment', 'right', ...
    'Enable', 'off');
handles.popup.manualOUTFcn = uicontrol('Parent', handles.panel.livePanels{2}, ...
    'Style', 'popup', ...
    'units', 'normalized', ...
    'Position', [.6, .3, .35, .05], ...
    'String', {''}, ...
    'Enable', 'off', ...
    'String', {''}, ...
    'Callback', {@setDigital, handles});
handles.check.ttlOut{2} = uicontrol('Parent', handles.panel.livePanels{2}, ...
    'Style', 'check', ...
    'Value', 0, ...
    'units', 'normalized', ...
    'Position', [.05, .25, .9, .05], ...
    'Callback', {@setDigital, handles});
handles.text.analogOUTPortLabel = uicontrol('Parent', handles.panel.livePanels{2}, ...
    'Style', 'text', ...
    'units', 'normalized', ...
    'Position', [.15, .2, .45, .05], ...
    'HorizontalAlignment', 'right', ...
    'Enable', 'off');
handles.popup.analogOUTPort = uicontrol('Parent', handles.panel.livePanels{2}, ...
    'Style', 'popup', ...
    'units', 'normalized', ...
    'Position', [.6, .2, .35, .05], ...
    'String', {''}, ...
    'Enable', 'off', ...
    'Callback', {@setDigital, handles});
handles.text.analogOUTFcnLabel = uicontrol('Parent', handles.panel.livePanels{2}, ...
    'Style', 'text', ...
    'units', 'normalized', ...
    'Position', [.15, .15, .45, .05], ...
    'HorizontalAlignment', 'right', ...
    'Enable', 'off');
handles.popup.analogOUTFcn = uicontrol('Parent', handles.panel.livePanels{2}, ...
    'Style', 'popup', ...
    'units', 'normalized', ...
    'Position', [.6, .15, .35, .05], ...
    'Enable', 'off', ...
    'String', {''}, ...
    'Callback', {@setDigital, handles});
handles.text.analogOUTChannelLabel = uicontrol('Parent', handles.panel.livePanels{2}, ...
    'Style', 'text', ...
    'units', 'normalized', ...
    'Position', [.15, .1, .45, .05], ...
    'HorizontalAlignment', 'right', ...
    'Enable', 'off');
handles.popup.analogOUTChannel = uicontrol('Parent', handles.panel.livePanels{2}, ...
    'Style', 'popup', ...
    'units', 'normalized', ...
    'Position', [.6, .1, .35, .05], ...
    'String', {''}, ...
    'Enable', 'off', ...
    'Callback', {@setDigital, handles});
handles.text.analogOUTValueLabel = uicontrol('Parent', handles.panel.livePanels{2}, ...
    'Style', 'text', ...
    'units', 'normalized', ...
    'Position', [.15, .05, .45, .05], ...
    'HorizontalAlignment', 'right', ...
    'Enable', 'off');
handles.edit.analogOUTValue = uicontrol('Parent', handles.panel.livePanels{2}, ...
    'Style', 'edit', ...
    'units', 'normalized', ...
    'Position', [.6, .05, .15, .05], ...
    'Enable', 'off', ...
    'Callback', {@setDigital, handles});
handles.button.analogOUTPeek = uicontrol('Parent', handles.panel.livePanels{2}, ...
    'Style', 'push', ...
    'units', 'normalized', ...
    'Position', [.75, .05, .2, .05], ...
    'Enable', 'off', ...
    'Callback', {@setDigital, handles});
handles.radio.analogOUTEdge{1} = uicontrol('Parent', handles.panel.livePanels{2}, ...
    'Style', 'radio', ...
    'units', 'normalized', ...
    'Position', [.15, 0, .35, .05], ...
    'Enable', 'off', ...
    'Callback', {@setDigital, handles});
handles.radio.analogOUTEdge{2} = uicontrol('Parent', handles.panel.livePanels{2}, ...
    'Style', 'radio', ...
    'units', 'normalized', ...
    'Position', [.6, 0, .35, .05], ...
    'Enable', 'off', ...
    'Callback', {@setDigital, handles});
%Control Bar
handles.panel.liveControls = uipanel('Parent', handles.panel.live, ...
    'units', 'normalized', ...
    'position', [.9, 0, .1, 1]);
handles.button.previewLive = uicontrol('Parent', handles.panel.liveControls, ...
    'Style', 'toggle', ...
    'units', 'normalized', ...
    'Position', [0, 0, 1, .1], ...
    'Callback', {@playLive, handles});
handles.button.recordLive = uicontrol('Parent', handles.panel.liveControls, ...
    'Style', 'toggle', ...
    'units', 'normalized', ...
    'Position', [0, .1, 1, .1], ...
    'Callback', {@recordLive, handles});
handles.button.exploreData = uicontrol('Parent', handles.panel.liveControls, ...
    'Style', 'push', ...
    'units', 'normalized', ...
    'Position', [0, .6, 1, .1], ...
    'Callback', {@exploreData, handles});
handles.button.clearLog = uicontrol('Parent', handles.panel.liveControls, ...
    'Style', 'push', ...
    'units', 'normalized', ...
    'Position', [0, .4, 1, .1], ...
    'Callback', {@clearLogFile, handles});
handles.text.samplesAcquiredLabel = uicontrol('Parent', handles.panel.liveControls, ...
    'Style', 'text', ...
    'units', 'normalized', ...
    'HorizontalAlignment', 'center', ...
    'Position', [0, .25, 1, .05]);
handles.text.samplesAcquired = uicontrol('Parent', handles.panel.liveControls, ...
    'Style', 'text', ...
    'units', 'normalized', ...
    'Position', [0, .2, 1, .05], ...
    'HorizontalAlignment', 'center');
handles.button.manualTTLIN = uicontrol('Parent', handles.panel.liveControls, ...
    'Style', 'push', ...
    'units', 'normalized', ...
    'Position', [0, .9, 1, .1], ...
    'Enable', 'off', ...
    'Tag', 'manualTTLIN', ...
    'Callback', {@setDigital, handles});
handles.button.manualTTLOUT = uicontrol('Parent', handles.panel.liveControls, ...
    'Style', 'push', ...
    'units', 'normalized', ...
    'Position', [0, .8, 1, .1], ...
    'Enable', 'off', ...
    'Tag', 'manualTTLOUT', ...
    'Callback', {@setDigital, handles});
%% Sequencing options panel
%Panel
handles.panel.analyzeSequenceOptions = uipanel(handles.panel.analyze, 'units', 'normalized', ...
    'position', [.3, .95, .6, .05]);
%Controls
handles.text.a_sequencingSource = uicontrol('Parent', handles.panel.analyzeSequenceOptions, ...
    'Style', 'text', ...
    'units', 'normalized', ...
    'Position', [0, 0, .125, 1], ...
    'HorizontalAlignment', 'right');
handles.popup.a_sequencingSource = uicontrol('Parent', handles.panel.analyzeSequenceOptions, ...
    'Style', 'popup', ...
    'units', 'normalized', ...
    'Position', [.125, 0, .125, 1], ...
    'String', {''}, ...
    'Callback', {@editSequencing, handles});
handles.text.a_sequencingOnset = uicontrol('Parent', handles.panel.analyzeSequenceOptions, ...
    'Style', 'text', ...
    'units', 'normalized', ...
    'Position', [.25, 0, .1, 1], ...
    'HorizontalAlignment', 'right');
[label, attributes] = getXML(handles.settings.xml.strings, 'Button', 'sequencingBefore', {'size', 'weight'});
handles.button.a_sequencingOnsetDirection = uicontrol('Parent', handles.panel.analyzeSequenceOptions, ...
    'Style', 'push', ...
    'units', 'normalized', ...
    'Position', [.35, 0, .05, 1], ...
    'String', label, ...
    'FontSize', eval(attributes{1}), ...
    'FontWeight', attributes{2}, ...
    'Callback', {@editSequencing, handles});
[label, attributes] = getXML(handles.settings.xml.strings, 'Button', 'sequencingLower', {'size', 'weight'});
handles.button.a_sequencingOnsetEdge = uicontrol('Parent', handles.panel.analyzeSequenceOptions, ...
    'Style', 'push', ...
    'units', 'normalized', ...
    'Position', [.4, 0, .05, 1], ...
    'String', label, ...
    'FontSize', eval(attributes{1}), ...
    'FontWeight', attributes{2}, ...
    'Callback', {@editSequencing, handles});
handles.edit.a_sequencingOnsetValue = uicontrol('Parent', handles.panel.analyzeSequenceOptions, ...
    'Style', 'edit', ...
    'units', 'normalized', ...
    'Position', [.45, 0, .075, 1], ...
    'String', num2str(handles.settings.analyze.onset.value), ...
    'Callback', {@editSequencing, handles});
handles.text.a_sequencingOffset = uicontrol('Parent', handles.panel.analyzeSequenceOptions, ...
    'Style', 'text', ...
    'units', 'normalized', ...
    'Position', [.525, 0, .1, 1], ...
    'HorizontalAlignment', 'right');
[label, attributes] = getXML(handles.settings.xml.strings, 'Button', 'sequencingAfter', {'size', 'weight'});
handles.button.a_sequencingOffsetDirection = uicontrol('Parent', handles.panel.analyzeSequenceOptions, ...
    'Style', 'push', ...
    'units', 'normalized', ...
    'Position', [.625, 0, .05, 1], ...
    'String', label, ...
    'FontSize', eval(attributes{1}), ...
    'FontWeight', attributes{2}, ...
    'Callback', {@editSequencing, handles});
[label, attributes] = getXML(handles.settings.xml.strings, 'Button', 'sequencingGreater', {'size', 'weight'});
handles.button.a_sequencingOffsetEdge = uicontrol('Parent', handles.panel.analyzeSequenceOptions, ...
    'Style', 'push', ...
    'units', 'normalized', ...
    'Position', [.675, 0 .05, 1], ...
    'String', label, ...
    'FontSize', eval(attributes{1}), ...
    'FontWeight', attributes{2}, ...
    'Callback', {@editSequencing, handles});
handles.edit.a_sequencingOffsetValue = uicontrol('Parent', handles.panel.analyzeSequenceOptions, ...
    'Style', 'edit', ...
    'units', 'normalized', ...
    'Position', [.725, 0, .075, 1], ...
    'String', num2str(handles.settings.analyze.offset.value), ...
    'Callback', {@editSequencing, handles});
handles.button.a_computeSequence = uicontrol('Parent', handles.panel.analyzeSequenceOptions, ...
    'Style', 'push', ...
    'units', 'normalized', ...
    'Position', [.8, 0, .125, 1], ...
    'Callback', {@editSequencing, handles});
handles.button.a_clearSequence = uicontrol('Parent', handles.panel.analyzeSequenceOptions, ...
    'Style', 'push', ...
    'units', 'normalized', ...
    'Position', [.925, 0, .075, 1], ...
    'Callback', {@editSequencing, handles});
%% Analyze Display Panel
handles.panel.analyzeDisplay = uipanel(handles.panel.analyze, 'units', 'normalized', ...
    'BackgroundColor', eval(getXML(handles.settings.xml.colors, 'Chart', 'backgroundAnalyze')), ...
    'position', [.3, 0, .6, .95]);
handles.axes.analyze = axes('Parent', handles.panel.analyzeDisplay, ...
    'units', 'normalized', ...
    'Position', [.075, .1, .925, .8], ...
    'Color', eval(getXML(handles.settings.xml.colors, 'Chart', 'backgroundAnalyze')), ...
    'Box', 'on');
try
    handles.axes.analyze.Toolbar.Visible = 'on';
catch
    warning('Unable to display axes toolbars using the current Matlab version')
end
%Create context menu to set colors
handles.contextMenu.analyzeAxis = uicontextmenu;
uimenu(handles.contextMenu.analyzeAxis, 'Callback', {@contextAnalyzeOptions, handles});
s = uimenu(handles.contextMenu.analyzeAxis);
uimenu(s, 'Callback', {@contextAnalyzeOptions, handles});
uimenu(s, 'Callback', {@contextAnalyzeOptions, handles});
uimenu(handles.contextMenu.analyzeAxis, 'Callback', {@contextAnalyzeOptions, handles});
set(handles.panel.analyzeDisplay, 'UiContextMenu', handles.contextMenu.analyzeAxis);
set(handles.axes.analyze, 'UiContextMenu', handles.contextMenu.analyzeAxis);
handles.edit.a_xMin = uicontrol('Parent', handles.panel.analyzeDisplay, ...
    'Style', 'edit', ...
    'units', 'normalized', ...
    'Position', [.075, .045, .05, .05], ...
    'String', num2str(min(handles.localSettings.analyzeXLim)), ...
    'BackgroundColor', eval(getXML(handles.settings.xml.colors, 'Chart', 'backgroundAnalyze')), ...
    'ForegroundColor', eval(getXML(handles.settings.xml.colors, 'Chart', 'foregroundAnalyze')), ...
    'Callback', {@editAxis, handles});
handles.edit.a_xMax = uicontrol('Parent', handles.panel.analyzeDisplay, ...
    'Style', 'edit', ...
    'units', 'normalized', ...
    'Position', [.95, .045, .05, .05], ...
    'String', num2str(max(handles.localSettings.analyzeXLim)), ...
    'BackgroundColor', eval(getXML(handles.settings.xml.colors, 'Chart', 'backgroundAnalyze')), ...
    'ForegroundColor', eval(getXML(handles.settings.xml.colors, 'Chart', 'foregroundAnalyze')), ...
    'Callback', {@editAxis, handles});
handles.edit.a_yMin = uicontrol('Parent', handles.panel.analyzeDisplay, ...
    'Style', 'edit', ...
    'units', 'normalized', ...
    'Position', [.025, .1, .05, .05], ...
    'String', num2str(min(handles.localSettings.analyzeYLim)), ...
    'BackgroundColor', eval(getXML(handles.settings.xml.colors, 'Chart', 'backgroundAnalyze')), ...
    'ForegroundColor', eval(getXML(handles.settings.xml.colors, 'Chart', 'foregroundAnalyze')), ...
    'HorizontalAlignment', 'right', ...
    'Callback', {@editAxis, handles});
handles.edit.a_yMax = uicontrol('Parent', handles.panel.analyzeDisplay, ...
    'Style', 'edit', ...
    'units', 'normalized', ...
    'Position', [.025, .85, .05, .05], ...
    'String', num2str(max(handles.localSettings.analyzeYLim)), ...
    'BackgroundColor', eval(getXML(handles.settings.xml.colors, 'Chart', 'backgroundAnalyze')), ...
    'ForegroundColor', eval(getXML(handles.settings.xml.colors, 'Chart', 'foregroundAnalyze')), ...
    'HorizontalAlignment', 'right', ...
    'Callback', {@editAxis, handles});
%% Analyze Controls Panel
handles.panel.analyzeControls = uipanel(handles.panel.analyze, 'units', 'normalized', ...
    'position', [.9, 0, .1, 1]);
%Radio group for view setting
handles.radiogroup.analyzeView = uibuttongroup('Parent', handles.panel.analyzeControls,...
    'units', 'normalized', ...
    'Position', [0, .85, 1, .15]);
handles.radio.label = uicontrol('Parent', handles.radiogroup.analyzeView, ...
    'Style', 'text', ...
    'units', 'normalized', ...
    'Position', [.025, .675, .3, .25]);
handles.radio.single = uicontrol('Parent', handles.radiogroup.analyzeView, ...
    'Style', 'radio', ...
    'units', 'normalized', ...
    'Position', [.4, .675, .8, .25], ...
    'Callback', {@analyzeView, handles});
handles.radio.multiple = uicontrol('Parent', handles.radiogroup.analyzeView, ...
    'Style', 'radio', ...
    'units', 'normalized', ...
    'Position', [.4, .35, .8, .25], ...
    'Callback', {@analyzeView, handles});
handles.radio.average = uicontrol('Parent', handles.radiogroup.analyzeView, ...
    'Style', 'radio', ...
    'units', 'normalized', ...
    'Position', [.4, .025, .8, .25], ...
    'Callback', {@analyzeView, handles});
%Enable the view saved in default settings
set(handles.radio.(lower(handles.settings.analyze.view)), 'Value', 1)
%Some buttons for pulse increment
handles.text.pulseIndex = uicontrol('Parent', handles.panel.analyzeControls, ...
    'Style', 'text', ...
    'units', 'normalized', ...
    'Position', [0, .8, 1, .05]);
handles.button.previous = uicontrol('Parent', handles.panel.analyzeControls, ...
    'Style', 'push', ...
    'units', 'normalized', ...
    'Position', [0, .7, .5, .1], ...
    'Callback', {@changeBtnFcn, handles});
handles.button.next = uicontrol('Parent', handles.panel.analyzeControls, ...
    'Style', 'push', ...
    'units', 'normalized', ...
    'Position', [.5, .7, .5, .1], ...
    'Callback', {@changeBtnFcn, handles});
%Signal Processing Options
handles.text.signalTreatsLabel = uicontrol('Parent', handles.panel.analyzeControls, ...
    'Style', 'text', ...
    'units', 'normalized', ...
    'Position', [0, .65, 1, .05]);
handles.popup.signalTreats = uicontrol('Parent', handles.panel.analyzeControls, ...
    'Style', 'popup', ...
    'units', 'normalized', ...
    'Position', [0, .6, 1, .05], ...
    'String', {''}, ...
    'Callback', {@setSignalTreat, handles});
files = dir(fullfile(handles.userFcnPath, 'signalTreats', '*.m'));
handles.popup.signalTreats.String = {'', files.name};
%Check the default option and set it if possible
if handles.settings.analyze.signalTreat > length(handles.popup.signalTreats.String)
    handles.settings.analyze.signalTreat = 1;
end
handles.popup.signalTreats.Value = handles.settings.analyze.signalTreat;
%Analyze Options
Ypos = 0:.1:.5;
for ii = 1:length(handles.settings.analyze.analyzeBtns)
    handles.button.analyzeBtns{ii} = uicontrol('Parent', handles.panel.analyzeControls, ...
        'Style', 'push', ...
        'units', 'normalized', ...
        'Position', [0, Ypos(ii), 1, .1], ...
        'Tag', num2str(ii), ...
        'Callback', {@analyzeOptions, handles});
end
%% Sequence Selection Panel
handles.panel.selection = uipanel(handles.panel.analyze, 'units', 'normalized', ...
    'position', [0, .6, .3, .4]);
handles.list.selection = uitable('Parent', handles.panel.selection, ...
    'units', 'normalized', ...
    'position', [0, 0, 1, 1], ...
    'Interruptible', 'off', ...
    'CellSelectionCallback', {@selectInSelection, handles}, ...
    'CellEditCallback', {@editInSelection, handles});
%% Results Panel
handles.panel.results = uipanel(handles.panel.analyze, 'units', 'normalized', ...
    'position', [0, 0, .3, .6]);
handles.list.results = uitable('Parent', handles.panel.results, ...
    'units', 'normalized', ...
    'position', [0, .1, 1, .9], ...
    'Interruptible', 'off', ...
    'CellSelectionCallback', {@selectInResults, handles});
handles.button.expandResults = uicontrol('Parent', handles.panel.results, ...
    'Style', 'push', ...
    'units', 'normalized', ...
    'Position', [.8, 0, .2, .1], ...
    'Callback', {@expandResults, handles});
%% Finzalize GUI
%Set some live display properties
handles = setAcqWindowProperties(handles);
%Call resetLanguage function to apply appropriate language
handles = resetLanguage(handles);
%Define some handles using rest GUI function
handles = resetGUI(handles);
%Define some default settings using reset TTL Fcn
handles = resetTTLSettings(handles);
%Call check hiding to disable controls
handles = checkHiding(handles);

%Center GUI and make it visible
movegui(handles.hObject, 'center')
set(handles.hObject, 'Visible', 'on')

%Store GUI data
guidata(handles.hObject, handles)
end